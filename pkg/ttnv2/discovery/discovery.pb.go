// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: discovery/discovery.proto

package discovery

import (
	context "context"
	fmt "fmt"
	ttnv2 "github.com/TheThingsIndustries/mystique/pkg/ttnv2"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("discovery/discovery.proto", fileDescriptor_fec68c2b2e63f812) }

var fileDescriptor_fec68c2b2e63f812 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0xc9, 0x2c, 0x4e,
	0xce, 0x2f, 0x4b, 0x2d, 0xaa, 0xd4, 0x87, 0xb3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38,
	0xe1, 0x02, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9,
	0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0x15, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0x74,
	0x4a, 0x71, 0x26, 0x16, 0x64, 0x42, 0x98, 0x46, 0x56, 0x5c, 0x9c, 0x2e, 0x30, 0x63, 0x84, 0x74,
	0xb9, 0x98, 0xdd, 0x53, 0x4b, 0x84, 0x04, 0xf5, 0x4a, 0x4a, 0xf2, 0xca, 0x8c, 0xf4, 0xdc, 0x53,
	0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x84, 0xa1, 0x42, 0x8e, 0x79, 0x79, 0xf9,
	0xa5, 0x79, 0xc9, 0xa9, 0xb9, 0xa9, 0x79, 0x25, 0x4e, 0xa1, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc,
	0x78, 0x2c, 0xc7, 0x10, 0x65, 0x8d, 0xe4, 0x9e, 0x90, 0x8c, 0xd4, 0x90, 0x8c, 0xcc, 0xbc, 0xf4,
	0x62, 0xcf, 0xbc, 0x94, 0xd2, 0xe2, 0x92, 0xa2, 0xcc, 0xd4, 0x62, 0xfd, 0xdc, 0xca, 0xe2, 0x92,
	0xcc, 0xc2, 0xd2, 0x54, 0xfd, 0x82, 0xec, 0x74, 0x7d, 0xb0, 0xc9, 0x08, 0xdf, 0x25, 0xb1, 0x81,
	0x5d, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x64, 0x9f, 0xa4, 0xfb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryClient interface {
	Get(ctx context.Context, in *ttnv2.GetRequest, opts ...grpc.CallOption) (*ttnv2.Announcement, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Get(ctx context.Context, in *ttnv2.GetRequest, opts ...grpc.CallOption) (*ttnv2.Announcement, error) {
	out := new(ttnv2.Announcement)
	err := c.cc.Invoke(ctx, "/discovery.Discovery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
type DiscoveryServer interface {
	Get(context.Context, *ttnv2.GetRequest) (*ttnv2.Announcement, error)
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ttnv2.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.Discovery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Get(ctx, req.(*ttnv2.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Discovery_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery/discovery.proto",
}
