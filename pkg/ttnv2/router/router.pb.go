// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: router/router.proto

package router

import (
	context "context"
	fmt "fmt"
	ttnv2 "github.com/TheThingsIndustries/mystique/pkg/ttnv2"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("router/router.proto", fileDescriptor_7214bc1619ffe283) }

var fileDescriptor_7214bc1619ffe283 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x25, 0x52, 0x23, 0xb1, 0x04, 0xd4, 0x21, 0x48, 0x9e, 0x59, 0xb0, 0x51, 0x59,
	0xba, 0x20, 0x24, 0x04, 0x42, 0x0c, 0x2c, 0x6d, 0x59, 0xd8, 0x92, 0x72, 0x38, 0x56, 0x1b, 0xdb,
	0xd8, 0x67, 0xaa, 0xbc, 0x05, 0xcf, 0xc4, 0xc4, 0xd8, 0x91, 0x11, 0x25, 0x2f, 0x82, 0xb0, 0x03,
	0x74, 0x41, 0x4c, 0xbe, 0x4f, 0xe7, 0xff, 0x3b, 0xe9, 0xcf, 0xf6, 0xad, 0xf6, 0x08, 0x96, 0xc7,
	0x87, 0x19, 0xab, 0x51, 0xe7, 0x69, 0xa4, 0xe2, 0x58, 0x48, 0xac, 0x7d, 0xc5, 0x96, 0xba, 0xe1,
	0x42, 0x0b, 0xcd, 0xc3, 0xba, 0xf2, 0x8f, 0x81, 0x02, 0x84, 0x29, 0xc6, 0x8a, 0x51, 0x69, 0xe4,
	0x30, 0x1e, 0x0a, 0xad, 0xc5, 0x1a, 0x7e, 0x03, 0xd0, 0x18, 0x6c, 0xe3, 0x72, 0xf2, 0x4a, 0xb2,
	0x74, 0x16, 0x2e, 0xe4, 0xe7, 0xd9, 0xde, 0x75, 0x89, 0xb0, 0x29, 0xdb, 0x39, 0x96, 0xe8, 0x5d,
	0x7e, 0xc0, 0x10, 0xd5, 0xf3, 0x84, 0x45, 0xbc, 0x05, 0xe7, 0x4a, 0x01, 0xc5, 0x98, 0x45, 0x1f,
	0xfb, 0xf6, 0xb1, 0xab, 0x2f, 0xdf, 0x11, 0xc9, 0xa7, 0x59, 0x7a, 0x67, 0xd6, 0x52, 0xad, 0x7e,
	0x92, 0x11, 0xff, 0x4f, 0x9e, 0x65, 0xa3, 0xb9, 0xaf, 0xdc, 0xd2, 0xca, 0x0a, 0xf2, 0x3f, 0xbe,
	0x15, 0xe3, 0x41, 0x7a, 0xa9, 0x37, 0x6a, 0x47, 0x7b, 0x42, 0x2e, 0x66, 0x6f, 0x1d, 0x25, 0xdb,
	0x8e, 0x92, 0x8f, 0x8e, 0x92, 0x97, 0x9e, 0x26, 0xdb, 0x9e, 0x26, 0xef, 0x3d, 0x4d, 0xee, 0xa7,
	0x3b, 0xad, 0x2d, 0x6a, 0x58, 0xd4, 0x52, 0x09, 0x77, 0xa3, 0x1e, 0xbc, 0x43, 0x2b, 0xc1, 0xf1,
	0xa6, 0x75, 0x28, 0x9f, 0x3c, 0x70, 0xb3, 0x12, 0x3c, 0xe8, 0x87, 0xf6, 0xab, 0x34, 0x5c, 0x3f,
	0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x11, 0xed, 0x1b, 0x32, 0x95, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error)
	Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error)
	Subscribe(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Router_SubscribeClient, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/router.Router/GatewayStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerGatewayStatusClient{stream}
	return x, nil
}

type Router_GatewayStatusClient interface {
	Send(*ttnv2.StatusMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type routerGatewayStatusClient struct {
	grpc.ClientStream
}

func (x *routerGatewayStatusClient) Send(m *ttnv2.StatusMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerGatewayStatusClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[1], "/router.Router/Uplink", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerUplinkClient{stream}
	return x, nil
}

type Router_UplinkClient interface {
	Send(*ttnv2.UplinkMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type routerUplinkClient struct {
	grpc.ClientStream
}

func (x *routerUplinkClient) Send(m *ttnv2.UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerUplinkClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Subscribe(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Router_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[2], "/router.Router/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SubscribeClient interface {
	Recv() (*ttnv2.DownlinkMessage, error)
	grpc.ClientStream
}

type routerSubscribeClient struct {
	grpc.ClientStream
}

func (x *routerSubscribeClient) Recv() (*ttnv2.DownlinkMessage, error) {
	m := new(ttnv2.DownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	GatewayStatus(Router_GatewayStatusServer) error
	Uplink(Router_UplinkServer) error
	Subscribe(*types.Empty, Router_SubscribeServer) error
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_GatewayStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).GatewayStatus(&routerGatewayStatusServer{stream})
}

type Router_GatewayStatusServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*ttnv2.StatusMessage, error)
	grpc.ServerStream
}

type routerGatewayStatusServer struct {
	grpc.ServerStream
}

func (x *routerGatewayStatusServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerGatewayStatusServer) Recv() (*ttnv2.StatusMessage, error) {
	m := new(ttnv2.StatusMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Uplink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).Uplink(&routerUplinkServer{stream})
}

type Router_UplinkServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*ttnv2.UplinkMessage, error)
	grpc.ServerStream
}

type routerUplinkServer struct {
	grpc.ServerStream
}

func (x *routerUplinkServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerUplinkServer) Recv() (*ttnv2.UplinkMessage, error) {
	m := new(ttnv2.UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).Subscribe(m, &routerSubscribeServer{stream})
}

type Router_SubscribeServer interface {
	Send(*ttnv2.DownlinkMessage) error
	grpc.ServerStream
}

type routerSubscribeServer struct {
	grpc.ServerStream
}

func (x *routerSubscribeServer) Send(m *ttnv2.DownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "router.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayStatus",
			Handler:       _Router_GatewayStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Uplink",
			Handler:       _Router_Uplink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Router_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "router/router.proto",
}
